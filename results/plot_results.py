import matplotlib.pyplot as plt 
from scipy.optimize import curve_fit
import numpy as np 

def fit_func(x, a, b):
    return a*x + b

def plot():


    fig, ((ax1, ax2), (ax3, ax4),(ax5, ax6)) = plt.subplots(3, 2)


    ff_time = [0, 2.9943044000001464, 6.08110970000007, 7.385049400000298, 11.865905999999995, 13.22048440000026, 15.891398799999934, 18.740407799999957, 23.452495, 23.85586259999991, 24.42844789999981, 29.247593399999914, 32.507030400000076, 35.17009719999987, 35.782346999999845, 39.28825060000008, 40.3003561999999, 55.942449099999976, 62.38829740000028, 59.90608370000018, 71.09070789999987, 73.08769329999996, 77.08626430000004, 71.3410143000001, 61.08566260000043, 61.469814199999746, 64.71901249999974, 70.38480519999939, 73.85799250000036, 72.99120299999959]
    ff_score = [0, -9, -10, -10, -12, -13, -13, -17, -13, -13, -11, -13, -13, -14, -14, -14, -13, -15, -14, -14, -14, -15, -13, -14, -13, -16, -15, -15, -17, -16]
    ff_time, ff_score  = remove_invalid(ff_time, ff_score)  
    ff_time, ff_score = zip(*sorted(zip(ff_time, ff_score)))
    fit = curve_fit(fit_func, ff_time, ff_score)
    [a, b] = fit[0]
    ff_x = np.linspace(0,80,10)
    ff_y = fit_func(ff_x, a , b)

    gen_time = [2.2535883000000467, 3.136726899999985, 2.936690100000078, 3.4115719000001263, 3.933979799999861, 4.45932619999985, 4.932581600000049, 5.660094599999866, 6.207759399999986, 6.795670900000005, 7.076566299999968, 7.808987299999899, 8.15387520000013, 8.698079100000086, 9.003350800000135, 9.474566200000027, 10.01206779999984, 10.591343199999983, 11.497593399999914, 12.432403199999953, 13.065560199999936, 13.699971000000005, 13.880697000000055, 13.839271600000075, 14.661686099999997, 15.434545399999934, 15.44601990000001, 16.535315500000024, 18.01468100000011, 18.521419700000024]
    gen_score = [-16, -17, -21, -21, -24, -24, -23, -22, -26, -23, -25, -25, -25, -23, -23, -24, -26, -30, -32, -25, -26, -25, -27, -30, -28, -25, -26, -28, -25, -25]
    gen_time, gen_score = remove_invalid(gen_time, gen_score) 
    gen_time, gen_score = zip(*sorted(zip(gen_time, gen_score)))
    fit = curve_fit(fit_func, gen_time, gen_score)
    [a, b] = fit[0]
    gen_x = np.linspace(2,18,10)
    gen_y = fit_func(gen_x, a , b)   

    hc_time =  [0.0007227000000000761, 0.6795782, 1.4943552, 2.3010105000000003, 3.4887558, 4.172404199999999, 5.191329799999998, 7.221289500000001, 5.545126800000002, 8.2172457, 10.844184999999996, 10.455186099999999, 10.839021200000005, 14.419224200000002, 14.450675400000009, 14.135806900000006, 15.043642300000016, 20.08866789999999, 16.54815020000001, 27.213129199999997, 38.32213490000001, 35.251384, 41.12886179999998, 34.102535000000046, 23.484467300000006, 29.0230325, 31.84199799999999, 30.4338075, 42.51356149999998, 40.575143300000036]
    hc_score =  [0, -19, -7, -12, -12, -20, -14, -17, -7, -13, -19, -14, -10, -16, -14, -20, -19, -14, -15, -10, -16, -9, -21, -13, -17, -15, -16, -8, -16, -14]
    hc_time, hc_score = remove_invalid( hc_time, hc_score)
    hc_time, hc_score = zip(*sorted(zip(hc_time, hc_score)))
    fit = curve_fit(fit_func, hc_time, hc_score)
    [a, b] = fit[0]
    hc_x = np.linspace(0,45,10)
    hc_y = fit_func(hc_x, a , b)  

    mc_time = [0.0032110000000784567, 0.39375270000005, 0.8004163000000517, 1.1824437999999873, 1.5808670999999777, 1.9688319000000547, 2.357688899999971, 2.7839261999999962, 3.1765765999999758, 3.559412699999939, 3.95442950000006, 4.378093100000001, 4.7343548000000055, 5.13618770000005, 5.651585700000055, 5.932002200000056, 6.379674000000023, 6.794354999999996, 7.167600100000072, 7.630189599999994, 7.925797999999986, 8.381628299999988, 8.725968800000032, 9.176951199999962, 9.535212399999978, 10.01388760000009, 10.415567799999963, 10.641135700000063, 11.164283400000045, 11.927865600000018]
    mc_score =  [0, -16, -15, -11, -16, -16, -17, -19, -21, -20, -19, -22, -21, -21, -23, -25, -23, -24, -20, -20, -27, -23, -19, -23, -21, -29, -24, -26, -20, -24]
    mc_time, mc_score = remove_invalid(mc_time, mc_score)
    mc_time, mc_score = zip(*sorted(zip(mc_time, mc_score)))
    fit = curve_fit(fit_func, mc_time, mc_score)
    [a, b] = fit[0]
    mc_x = np.linspace(0,12,10)
    mc_y = fit_func(mc_x, a , b)        

    sa_time =  [0.0003201000000103704, 0.06157519999999295, 0.15230439999999135, 0.21352920000001063, 0.2520168000000069, 0.34826149999997824, 0.4062554999999861, 0.4386835999999903, 0.5320345000000088, 0.7183947000000046, 0.7128514999999993, 0.8226482999999973, 0.9520476000000144, 1.005597999999992, 0.9698278999999843, 1.0947122999999976, 1.1070517999999936, 1.2897845999999902, 1.2797142999999949, 1.2399372000000142, 1.391921400000001, 1.3816793000000018, 1.630794800000018, 1.731828500000006, 1.7032326000000069, 1.8242423000000088, 1.9670729999999992, 1.8898682999999892, 2.04432970000002, 2.367449100000016]
    sa_score =  [0, -5, -4, -7, -6, -10, -15, -14, -12, -13, -13, -11, -13, -11, -16, -13, -15, -10, -10, -11, -13, -12, -12, -16, -13, -11, -13, -17, -14, -12]
    sa_time, sa_score = remove_invalid( sa_time, sa_score)
    sa_time, sa_score = zip(*sorted(zip(sa_time, sa_score)))
    fit = curve_fit(fit_func, sa_time, sa_score)
    [a, b] = fit[0]
    sa_x = np.linspace(0,2.5,10)
    sa_y = fit_func(sa_x, a , b)       

    sap_time = [0.0006084000000043943, 0.054100500000004104, 0.12451109999997811, 0.1881640999999945, 0.3142138999999986, 0.40236049999998613, 0.38018209999998476, 0.5228215999999861, 0.62050720000002, 0.661270299999984, 0.7971253000000047, 0.8682678000000124, 0.9010515000000225, 1.0064873000000034, 0.9814575999999988, 1.1026455999999882, 1.3101735999999846, 1.3330727000000024, 1.3354990999999927, 1.3324097999999935, 1.5345511999999815, 1.690653999999995, 1.791016600000006, 1.7747298000000171, 1.8500755000000026, 1.991094199999992, 1.9678812999999877, 2.193517899999989, 2.111682000000002, 2.217188199999981]
    sap_score =  [0, -8, -9, -13, -9, -12, -12, -9, -20, -7, -16, -13, -16, -13, -14, -15, -22, -16, -14, -14, -16, -13, -16, -13, -20, -16, -19, -16, -12, -21]
    sap_time, sap_score = remove_invalid(sap_time, sap_score)
    sap_time, sap_score = zip(*sorted(zip(sap_time, sap_score)))
    fit = curve_fit(fit_func, sap_time, sap_score)
    [a, b] = fit[0]
    sap_x = np.linspace(0,2.5,10)
    sap_y = fit_func(sap_x, a , b)       

    fig.suptitle('Relationship between runtime and score')

    ax1.plot(ff_time, ff_score)
    ax1.plot(ff_x, ff_y)
    ax1.set_title('Firefly')

    ax2.plot(gen_time, gen_score)
    ax2.plot(gen_x, gen_y)
    ax2.set_title('Genetic')

    ax3.plot(hc_time, hc_score)
    ax3.plot(hc_x, hc_y)
    ax3.set_title('Hill Climber')

    ax4.plot(mc_time, mc_score)
    ax4.plot(mc_x, mc_y)
    ax4.set_title('Monte Carlo')


    ax5.plot(sa_time, sa_score)
    ax5.plot(sa_x, sa_y)
    ax5.set_title('Simulated Annealing')

    ax6.plot(sap_time, sap_score)
    ax6.plot(sap_x, sap_y)
    ax6.set_title('Simulated Annealing Plus')
        
    fig.text(0.5, 0.04, 'Time [s]', ha='center', va='center', fontsize = 15)
    fig.text(0.06, 0.5, 'Score', ha='center', va='center', rotation='vertical', fontsize = 15)


    plt.show()


def remove_invalid(time_list, score_list):

    to_remove = []

    for i in range(len(time_list)):

        if score_list[i] == 0:
            to_remove.append(i)
         
    to_remove.reverse()

    for i in to_remove:
        del time_list[i]
        del score_list[i]

    return time_list, score_list



if __name__ == "__main__":
    plot()



#    fig, (ax1) = plt.subplots(1, 1)

#     ax1.plot(list_x, list_y, '--', color='darkgrey')
#     ax1.plot(red_dots_x, red_dots_y, 'or', markersize=17)
#     ax1.plot(blue_dots_x, blue_dots_y, 'ob', markersize=17)
#     ax1.plot(yellow_dots_x, yellow_dots_y, 'oy', markersize=17)
#     ax1.axis('equal')
#     ax1.set_title(f'Folded protein of length {proti.length}, score: {score}, total: {runtime}')

#     plt.show()